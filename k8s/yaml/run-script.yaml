apiVersion: v1
data:
  event: ""
  run: "#!/bin/bash -e\n\n# Set var EVENT_LOOP_INTERVAL to desired interval period
    in seconds.\n# If not set then the default value of $EVENT_LOOP_INTERVAL_DEFAULT\n#
    will be used.\n#\n# Set var START_DELAY to desired period of seconds. If not set
    then\n# the default value of $START_DELAY_DEFAULT will be used.\n\nEVENT_LOOP_INTERVAL_DEFAULT=10\nSTART_DELAY_DEFAULT=10\n\nfunction
    main() {\n  err \"Starting\"\n  cd \"$(dirname \"$0\")\" || { err \"Unable to
    change to working directory\"; return 3; }\n  run=true\n  trap sigterm SIGTERM\n
    \ trap sigint SIGINT\n  trap sighup SIGHUP\n\n  local eventLoopInterval\n\n  #
    shellcheck disable=SC2015\n  [[ \"$EVENT_LOOP_INTERVAL\" ]] && {\n    eventLoopInterval=$EVENT_LOOP_INTERVAL\n
    \   err \"Event loop interval set to $eventLoopInterval (user)\"\n  } || {\n    eventLoopInterval=$EVENT_LOOP_INTERVAL_DEFAULT\n
    \   err \"Event loop interval set to $eventLoopInterval (default)\"\n  } \n\n
    \ [ \"$eventLoopInterval\" -eq \"$eventLoopInterval\" ] || { err \"Event Loop
    Interval is not a valid integer\"; return 2; }\n  [ \"$eventLoopInterval\" -le
    0 ] && { err \"Event Loop Interval must be greater then zero\"; return 2; }\n\n
    \ local startDelay\n\n  # shellcheck disable=SC2015\n  [[ \"$START_DELAY\" ]]
    && {\n    startDelay=$START_DELAY\n    err \"Start delay set to $startDelay (user)\"\n
    \ } || {\n    startDelay=$START_DELAY_DEFAULT\n    err \"Start delay set to $startDelay
    (default)\"\n  } \n\n  [ \"$startDelay\" -eq \"$startDelay\" ] || { err \"Start
    Delay is not a valid integer\"; return 2; }\n  [ \"$startDelay\" -lt 0 ] && {
    err \"Start Delay must be zero or greater\"; return 2; }\n\n  [ \"$startDelay\"
    -gt 0 ] && {\n    err \"Start delay\"\n    sleep_for $startDelay\n  }\n\n  err
    \"Running\"\n  event_loop $eventLoopInterval ||:\n  err \"Goodbye\"\n  return
    0\n}\n\nfunction event_loop() {\n  local eventLoopInterval=\"$1\"\n  while $run;
    do\n    event ||:\n    sleep_for \"$eventLoopInterval\"\n  done\n}\n\nfunction
    event() {\n  [ -f event ] && {\n    err \"Executing event\"\n    err \"<start>\"\n
    \   bash -xe event\n    err \"<end>\"\n  }\n}\n\nfunction sigterm() { err \"Caught
    SIGTERM\"; run=false; }\nfunction sigint() { err \"Caught SIGINT\"; run=false;
    }\nfunction sighup() { err \"Caught SIGHUP\"; run=false; }\n\nfunction sleep_for()
    {\n  local t=$1\n  [ \"$t\" -eq \"$t\" ] || { err \"$t is must be a positive integer\";
    return 2; }\n  [ \"$t\" -gt 0 ] || { err \"$t is an integer but must be positived\";
    return 2; }\n  err \"Sleeping for $t second(s)\"\n  local c=0\n  while $run; do\n
    \   ((c=c+1))\n    [ \"$c\" -gt \"$t\" ] && return 0\n    sleep 1\n  done\n}\n\nfunction
    err() { echo \"$@\" 1>&2; }\n\nmain \"$@\"\n"
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: run
